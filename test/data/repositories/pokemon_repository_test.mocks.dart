// Mocks generated by Mockito 5.0.17 from annotations
// in pokedex/test/data/repositories/pokemon_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:pokedex/data/datasources/pokemon_local_datasource.dart' as _i6;
import 'package:pokedex/data/datasources/pokemon_remote_datasource.dart' as _i4;
import 'package:pokedex/domain/entities/pokemon.dart' as _i2;
import 'package:pokedex/domain/repositories/pokemon_repository.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePokemon_0 extends _i1.Fake implements _i2.Pokemon {}

class _FakeGetFavoritePokemonResponse_1 extends _i1.Fake
    implements _i3.GetFavoritePokemonResponse {}

/// A class which mocks [PokemonRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonRemoteDataSource extends _i1.Mock
    implements _i4.PokemonRemoteDataSource {
  MockPokemonRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Pokemon>> getPokemons(
          {int? offset = 0, int? limit = 20}) =>
      (super.noSuchMethod(
          Invocation.method(#getPokemons, [], {#offset: offset, #limit: limit}),
          returnValue:
              Future<List<_i2.Pokemon>>.value(<_i2.Pokemon>[])) as _i5
          .Future<List<_i2.Pokemon>>);
  @override
  _i5.Future<_i2.Pokemon> get(dynamic nameOrId) =>
      (super.noSuchMethod(Invocation.method(#get, [nameOrId]),
              returnValue: Future<_i2.Pokemon>.value(_FakePokemon_0()))
          as _i5.Future<_i2.Pokemon>);
  @override
  _i5.Future<_i3.GetFavoritePokemonResponse> getFavoritePokemons(
          {bool? invalidateCache = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getFavoritePokemons, [], {#invalidateCache: invalidateCache}),
          returnValue: Future<_i3.GetFavoritePokemonResponse>.value(
              _FakeGetFavoritePokemonResponse_1())) as _i5
          .Future<_i3.GetFavoritePokemonResponse>);
  @override
  _i5.Future<void> removeFavoritePokemon(_i2.Pokemon? pokemon) =>
      (super.noSuchMethod(Invocation.method(#removeFavoritePokemon, [pokemon]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> updateFavoritePokemon(_i2.Pokemon? pokemon) =>
      (super.noSuchMethod(Invocation.method(#updateFavoritePokemon, [pokemon]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> addFavoritePokemon(_i2.Pokemon? pokemon) =>
      (super.noSuchMethod(Invocation.method(#addFavoritePokemon, [pokemon]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<bool> isFavoritePokemon(_i2.Pokemon? pokemon) =>
      (super.noSuchMethod(Invocation.method(#isFavoritePokemon, [pokemon]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}

/// A class which mocks [PokemonLocalDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPokemonLocalDatasource extends _i1.Mock
    implements _i6.PokemonLocalDatasource {
  MockPokemonLocalDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.Pokemon>> getPokemons(
          {int? offset = 0, int? limit = 20}) =>
      (super.noSuchMethod(
          Invocation.method(#getPokemons, [], {#offset: offset, #limit: limit}),
          returnValue:
              Future<List<_i2.Pokemon>>.value(<_i2.Pokemon>[])) as _i5
          .Future<List<_i2.Pokemon>>);
  @override
  _i5.Future<_i2.Pokemon> get(dynamic nameOrId) =>
      (super.noSuchMethod(Invocation.method(#get, [nameOrId]),
              returnValue: Future<_i2.Pokemon>.value(_FakePokemon_0()))
          as _i5.Future<_i2.Pokemon>);
  @override
  _i5.Future<_i3.GetFavoritePokemonResponse> getFavoritePokemons(
          {bool? invalidateCache = false}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getFavoritePokemons, [], {#invalidateCache: invalidateCache}),
          returnValue: Future<_i3.GetFavoritePokemonResponse>.value(
              _FakeGetFavoritePokemonResponse_1())) as _i5
          .Future<_i3.GetFavoritePokemonResponse>);
  @override
  _i5.Future<void> removeFavoritePokemon(_i2.Pokemon? pokemon) =>
      (super.noSuchMethod(Invocation.method(#removeFavoritePokemon, [pokemon]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> updateFavoritePokemon(_i2.Pokemon? pokemon) =>
      (super.noSuchMethod(Invocation.method(#updateFavoritePokemon, [pokemon]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> addFavoritePokemon(_i2.Pokemon? pokemon) =>
      (super.noSuchMethod(Invocation.method(#addFavoritePokemon, [pokemon]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<bool> isFavoritePokemon(_i2.Pokemon? pokemon) =>
      (super.noSuchMethod(Invocation.method(#isFavoritePokemon, [pokemon]),
          returnValue: Future<bool>.value(false)) as _i5.Future<bool>);
}
